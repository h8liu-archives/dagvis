// Generated by CoffeeScript 1.6.3
(function() {
  var main;

  main = function() {
    var b, boxHeight, boxWidth, boxof, dat, esc, fromx, fromy, lab, node, output, p, path, pathof, svg, toNode, tox, toy, turnx, xgrid, ygrid, _i, _j, _len, _len1, _ref, _ref1;
    svg = d3.select("svg#main");
    xgrid = 130;
    ygrid = 30;
    boxWidth = 120;
    boxHeight = 20;
    esc = function(name) {
      return name.replace(/\//g, '_');
    };
    boxof = function(name) {
      return "rect#" + esc(name);
    };
    pathof = function(from, to) {
      return "path#" + esc(from) + "-" + esc(to);
    };
    for (node in gostd) {
      dat = gostd[node];
      _ref = dat.outs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        output = _ref[_i];
        toNode = gostd[output];
        fromx = dat.x * xgrid + boxWidth;
        fromy = dat.y * ygrid + boxHeight / 2;
        tox = toNode.x * xgrid;
        toy = toNode.y * ygrid + boxHeight / 2;
        turnx = tox - 5;
        path = "M" + fromx + " " + fromy;
        path += " L" + turnx + " " + fromy;
        path += " L" + turnx + " " + toy;
        path += " L" + tox + " " + toy;
        p = svg.append("path");
        p.attr("d", path);
        p.attr("class", "bg");
      }
    }
    for (node in gostd) {
      dat = gostd[node];
      _ref1 = dat.outs;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        output = _ref1[_j];
        toNode = gostd[output];
        fromx = dat.x * xgrid + boxWidth;
        fromy = dat.y * ygrid + boxHeight / 2;
        tox = toNode.x * xgrid;
        toy = toNode.y * ygrid + boxHeight / 2;
        turnx = tox - 5;
        path = "M" + fromx + " " + fromy;
        path += " L" + turnx + " " + fromy;
        path += " L" + turnx + " " + toy;
        path += " L" + tox + " " + toy;
        p = svg.append("path");
        p = svg.append("path");
        p.attr("d", path);
        p.attr("id", esc(node) + "-" + esc(output));
        p.attr("class", "dep");
      }
    }
    for (node in gostd) {
      dat = gostd[node];
      dat.name = node;
      b = svg.append("rect");
      b.attr("x", dat.x * xgrid);
      b.attr("y", dat.y * ygrid);
      b.attr("ry", 5);
      b.attr("ry", 5);
      b.attr("width", boxWidth);
      b.attr("height", boxHeight);
      b.attr("class", "box");
      b.attr("id", esc(node));
      lab = svg.append("text");
      lab.attr("x", dat.x * xgrid + boxWidth / 2);
      lab.attr("y", dat.y * ygrid + boxHeight / 2 + 4);
      lab.attr("class", "lab");
      lab.attr("id", "lab-" + name);
      lab.text(node);
      b.on("mouseover", (function() {
        var x;
        x = dat;
        return function(d) {
          var input, _k, _l, _len2, _len3, _ref2, _ref3;
          svg.selectAll("rect").attr("class", "box");
          svg.selectAll("path.dep").attr("class", "dep");
          svg.select(boxof(x.name)).attr("class", "box focus");
          _ref2 = x.ins;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            input = _ref2[_k];
            svg.select(boxof(input)).attr("class", "box in");
            svg.select(pathof(input, x.name)).attr("class", "dep in");
          }
          _ref3 = x.outs;
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            output = _ref3[_l];
            svg.select(boxof(output)).attr("class", "box out");
            svg.select(pathof(x.name, output)).attr("class", "dep out");
          }
        };
      })());
    }
  };

  $(document).ready(main);

}).call(this);
